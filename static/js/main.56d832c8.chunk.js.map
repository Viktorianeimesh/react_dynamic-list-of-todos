{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","components/LoadingError/LoadingError.tsx","App.tsx","hooks/useSortAndSearch.jsx","index.tsx"],"names":["TodoList","todos","selectedTodo","openTodo","className","map","todo","classnames","id","completed","title","type","onClick","TodoFilter","filter","setFilter","value","sort","onChange","event","target","placeholder","query","e","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","userId","Loader","TodoModal","closeTodo","useState","user","setUser","a","userFromServer","useEffect","fetchUser","href","email","name","LoadingError","App","setTodos","isLoading","setIsLoading","setSelectedTodo","hasLoadingError","setHasLoadingError","todosFromServer","fetchTodos","sortedAndSearchedTodos","useMemo","toLowerCase","includes","useSortAndSearch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56d832c8.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  openTodo: (todo: Todo) => void\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  openTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          key={todo.id}\n          className={classnames(\n            { 'has-background-info-light': selectedTodo === todo },\n          )}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classnames(\n              {\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              },\n            )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => openTodo(todo)}\n            >\n              {(selectedTodo === todo)\n                ? (\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                )\n                : (\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                )}\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","type Props = {\n  filter: {\n    query: string;\n    sort: string;\n  },\n  /* eslint-disable  @typescript-eslint/no-explicit-any */\n  setFilter: (arg: any) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({ filter, setFilter }) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          value={filter.sort}\n          onChange={event => setFilter({ ...filter, sort: event.target.value })}\n          data-cy=\"statusSelect\"\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={filter.query}\n        onChange={e => setFilter({ ...filter, query: e.target.value })}\n\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {filter.query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            data-cy=\"clearSearchButton\"\n            aria-label=\"delete\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setFilter({ ...filter, query: '' })}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo,\n  closeTodo: () => void\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, closeTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  async function fetchUser() {\n    const userFromServer = await getUser(selectedTodo.userId);\n\n    setUser(userFromServer);\n  }\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo.id}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"delete\"\n              onClick={closeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","export const LoadingError = () => {\n  return (\n    <div className=\"notification is-danger is-light\">\n      An error occured when loading data\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\nimport { useSortAndSearch } from './hooks/useSortAndSearch';\nimport { LoadingError } from './components/LoadingError';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filter, setFilter] = useState({ sort: 'All', query: '' });\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  async function fetchTodos() {\n    setIsLoading(true);\n    setHasLoadingError(false);\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n      setIsLoading(false);\n    } catch (error) {\n      setHasLoadingError(true);\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const openTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const closeTodo = () => {\n    setSelectedTodo(null);\n  };\n\n  const sortedAndSearchedTodos = useSortAndSearch(\n    todos,\n    filter.sort,\n    filter.query,\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filter={filter}\n                setFilter={setFilter}\n              />\n            </div>\n\n            {hasLoadingError\n              ? <LoadingError />\n              : (\n                <div className=\"block\">\n                  {isLoading\n                    ? <Loader />\n                    : (\n                      <TodoList\n                        todos={sortedAndSearchedTodos}\n                        selectedTodo={selectedTodo}\n                        openTodo={openTodo}\n                      />\n                    )}\n                </div>\n              )}\n\n            {selectedTodo\n            && (\n              <TodoModal\n                selectedTodo={selectedTodo}\n                closeTodo={closeTodo}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useMemo } from 'react';\n\nexport const useSortAndSearch = (todos, sort, query) => {\n  const modifiedTodos = useMemo(() => {\n    return (todos\n      .filter(todo => {\n        switch (sort) {\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          default:\n            return todo;\n        }\n      })\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()))\n    );\n  }, [todos, sort, query]);\n\n  return modifiedTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}